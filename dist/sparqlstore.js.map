{"version":3,"file":"sparqlstore.js","sourceRoot":"","sources":["../src/sparqlstore.ts"],"names":[],"mappings":"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","sourcesContent":["import { Quad, Quad_Object } from \"@rdfjs/types\";\nimport { BasicRepresentation, ChangeMap, Conditions, CONTENT_TYPE, guardedStreamFrom, INTERNAL_QUADS, Patch, Representation, RepresentationMetadata, RepresentationPreferences, ResourceIdentifier, ResourceStore } from \"@solid/community-server\";\nimport { Parser } from \"n3\";\nimport { DataFactory } from \"rdf-data-factory\";\nimport { Fetcher } from \"./Fetcher\";\n\nexport type SparqlFragment = {\n    id: string,\n    label: string,\n    versionOf: string,\n    timeGenerated: string,\n    validFrom: Date\n};\n\nconst datafactory = new DataFactory();\n\nconst ldesMetadata = `\n    @prefix tree: <https://w3id.org/tree#>.\n    @prefix ldes: <https://w3id.org/ldes#>.\n    @prefix prov:  <http://www.w3.org/ns/prov#generatedAtTime>.\n    @prefix ex: <http://www.example.com/ns#>.\n\n    ex:C1 a ldes:EventStream ;\n        ldes:timestampPath prov:genAtTime ; \n        tree:view <?page=1> .\n    `\n\nfunction ldesRelation(offset: number, generatedAtTime: string, base: string) {\n    const quads = `\n    @prefix tree: <https://w3id.org/tree#>.\n    @prefix prov:  <http://www.w3.org/ns/prov#generatedAtTime>.\n    @prefix xsd: <http://www.w3.org/2001/XMLSchema#>.\n\n    <> a tree:Node ;\n    tree:relation[\n        a tree:GreaterThanRelation ;\n        tree:path prov:genAtTime ;\n        tree:node <./?page=${offset + 1}> ;\n        tree:value \"${generatedAtTime}\"^^xsd:dateTime ;\n    ].\n    `\n    const parser = new Parser({ baseIRI: base })\n    return parser.parse(quads)\n}\n\nfunction filterFunction(quad: Quad): boolean {\n    const expectedPredicate = \"http://www.w3.org/ns/prov#generatedAtTime\"\n    return quad.predicate.value === expectedPredicate\n}\n\nfunction compareGeneratedAtTime(x: Quad_Object, y: Quad_Object): Quad_Object {\n    const date1 = new Date(x.value);\n    const date2 = new Date(y.value);\n\n    if (date1 > date2) {\n        return x;\n    } else { return y }\n}\n\nexport class SparqlStore implements ResourceStore {\n\n    fetcher: Fetcher;\n    pageSize: number;\n\n    constructor(pageSize: number, url: string) {\n        this.pageSize = pageSize;\n        this.fetcher = new Fetcher(url, this.pageSize)\n    }\n\n    getRepresentation = async (identifier: ResourceIdentifier, preferences: RepresentationPreferences, conditions?: Conditions): Promise<Representation> => {\n        console.log(\"Getting representation for \" + identifier.path);\n        const url = new URL(identifier.path)\n        const page = url.searchParams.get(\"page\");\n        let quads\n        if (page) {\n            quads = await this.fetcher.fetch(parseInt(page) * this.pageSize);\n            const maxTimeObject = quads.filter(filterFunction).map(x => x.object).reduce(compareGeneratedAtTime);\n            const relationQuads = ldesRelation(parseInt(page), maxTimeObject.value, identifier.path);\n\n            const memberquads = [];\n            const doneMember = new Set();\n            for (let member of quads) {\n                if (!doneMember.has(member.subject.value)) {\n                    doneMember.add(member.subject.value);\n                    memberquads.push(datafactory.quad(\n                        datafactory.namedNode(\"http://www.example.com/ns#C1\"),\n                        datafactory.namedNode(\"https://w3id.org/tree#member\"),\n                        member.subject\n                    ));\n                }\n            }\n\n            quads.push(...relationQuads);\n            quads.push(...memberquads);\n        } else {\n            const parser = new Parser()\n            quads = parser.parse(ldesMetadata)\n        }\n        return new BasicRepresentation(\n            guardedStreamFrom(quads),\n            new RepresentationMetadata({ [CONTENT_TYPE]: INTERNAL_QUADS })\n        );\n    };\n\n    setRepresentation = async (identifier: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Set representation\", identifier, representation, conditions)\n        throw \"Not implemented set\"\n    };\n    addResource = async (container: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Add representation\", container, representation, conditions)\n        throw \"Not implemented add\"\n    };\n    deleteResource = async (identifier: ResourceIdentifier, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Delete representation\", identifier, conditions)\n        throw \"Not implemented delete\"\n    };\n    modifyResource = async (identifier: ResourceIdentifier, patch: Patch, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Modify representation\", identifier, patch, conditions)\n        throw \"Not implemented modify\"\n    };\n    hasResource = async (identifier: ResourceIdentifier): Promise<boolean> => {\n        return true;\n    }\n\n}\n\n"]}