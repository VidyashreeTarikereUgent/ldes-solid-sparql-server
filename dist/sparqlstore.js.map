{"version":3,"file":"sparqlstore.js","sourceRoot":"","sources":["../src/sparqlstore.ts"],"names":[],"mappings":"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","sourcesContent":["import { Quad, Quad_Object, Term } from \"@rdfjs/types\";\nimport { BasicRepresentation, ChangeMap, Conditions, CONTENT_TYPE, guardedStreamFrom, INTERNAL_QUADS, Patch, RdfPatcher, Representation, RepresentationMetadata, RepresentationPreferences, ResourceIdentifier, ResourceStore } from \"@solid/community-server\";\nimport { LDES, RDF } from \"@treecg/types\";\nimport { readFileSync } from \"fs\";\nimport { Parser } from \"n3\";\nimport { DataFactory } from \"rdf-data-factory\";\nimport { Fetcher } from \"./Fetcher\";\n\nexport type SparqlFragment = {\n    id: string,\n    label: string,\n    versionOf: string,\n    timeGenerated: string,\n    validFrom: Date\n};\n\nconst datafactory = new DataFactory();\n\nfunction ldesRelation(offset: number, generatedAtTime: string, base: string, relationType: string, treePath: string) {\n    const quads = `\n    @prefix tree: <https://w3id.org/tree#>.\n    @prefix prov:  <http://www.w3.org/ns/prov#generatedAtTime>.\n    @prefix xsd: <http://www.w3.org/2001/XMLSchema#>.\n\n    <> a tree:Node ;\n    tree:relation[\n        a <${relationType}> ;\n        tree:path <${treePath}> ;\n        tree:node <./?page=${offset + 1}> ;\n        tree:value \"${generatedAtTime}\"^^xsd:dateTime ;\n    ].\n    `\n    const parser = new Parser({ baseIRI: base })\n    return parser.parse(quads)\n}\n\nfunction compareGeneratedAtTime(x: Quad_Object, y: Quad_Object): Quad_Object {\n    const date1 = new Date(x.value);\n    const date2 = new Date(y.value);\n\n    if (date1 > date2) {\n        return x;\n    } else { return y }\n}\n\nexport class SparqlStore implements ResourceStore {\n    host: string;\n\n    metadata: Quad[];\n    relationType: string;\n    timetampPath: string;\n\n    fetcher: Fetcher;\n    pageSize: number;\n\n    constructor(pageSize: number, url: string, queryFileLocation: string, metadataLocation: string, relationType: string, host: string, path: string) {\n        this.pageSize = pageSize;\n        this.host = host + path;\n\n        console.log(\"i am here\", this.host, host, path)\n\n        const queryString = readFileSync(queryFileLocation).toString();\n        const metadataString = readFileSync(metadataLocation).toString();\n        const metadataQuads = new Parser().parse(metadataString);\n        const eventStreamSubject = metadataQuads.find(q => q.predicate.equals(RDF.terms.type) && q.object.equals(LDES.terms.EventStream))!.subject;\n\n        this.timetampPath = metadataQuads.find(q => q.subject.equals(eventStreamSubject) && q.predicate.equals(LDES.terms.timestampPath))!.object.value;\n\n        this.metadata = metadataQuads.map(q => {\n            if (q.subject.equals(eventStreamSubject)) {\n                return datafactory.quad(datafactory.namedNode(host + path), q.predicate, q.object, q.graph);\n            } else {\n                return q\n            }\n        });\n\n\n        this.relationType = relationType;\n\n        this.fetcher = new Fetcher(url, this.pageSize, queryString)\n    }\n\n    getRepresentation = async (identifier: ResourceIdentifier, preferences: RepresentationPreferences, conditions?: Conditions): Promise<Representation> => {\n        console.log(\"Getting representation for \" + identifier.path);\n        const url = new URL(identifier.path)\n        const page = url.searchParams.get(\"page\");\n        let quads\n        if (page) {\n            quads = await this.fetcher.fetch(parseInt(page) * this.pageSize);\n            const maxTimeObject = quads.filter(q => q.predicate.value === this.timetampPath).map(x => x.object).reduce(compareGeneratedAtTime);\n            const relationQuads = ldesRelation(parseInt(page), maxTimeObject.value, identifier.path, this.relationType, this.timetampPath);\n\n            const memberquads = [];\n            const doneMember = new Set();\n            for (let member of quads) {\n                if (!doneMember.has(member.subject.value)) {\n                    doneMember.add(member.subject.value);\n                    memberquads.push(datafactory.quad(\n                        datafactory.namedNode(this.host),\n                        datafactory.namedNode(\"https://w3id.org/tree#member\"),\n                        member.subject\n                    ));\n                }\n            }\n\n            quads.push(...relationQuads);\n            quads.push(...memberquads);\n\n        } else {\n            quads = this.metadata;\n        }\n\n        return new BasicRepresentation(\n            guardedStreamFrom(quads),\n            new RepresentationMetadata({ [CONTENT_TYPE]: INTERNAL_QUADS })\n        );\n    };\n\n    setRepresentation = async (identifier: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Set representation\", identifier, representation, conditions)\n        throw \"Not implemented set\"\n    };\n    addResource = async (container: ResourceIdentifier, representation: Representation, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Add representation\", container, representation, conditions)\n        throw \"Not implemented add\"\n    };\n    deleteResource = async (identifier: ResourceIdentifier, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Delete representation\", identifier, conditions)\n        throw \"Not implemented delete\"\n    };\n    modifyResource = async (identifier: ResourceIdentifier, patch: Patch, conditions?: Conditions): Promise<ChangeMap> => {\n        console.log(\"Modify representation\", identifier, patch, conditions)\n        throw \"Not implemented modify\"\n    };\n    hasResource = async (identifier: ResourceIdentifier): Promise<boolean> => {\n        return true;\n    }\n}\n\n"]}